plugins {
    id 'java'
    id 'io.quarkus'
    id("io.freefair.lombok") version "8.1.0"
    id 'jacoco'
}


repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    //OpenAI
    implementation("com.theokanning.openai-gpt3-java:service:0.15.0")

    //Monitoring and Observability
    implementation("io.quarkus:quarkus-opentelemetry")
    implementation("io.opentelemetry:opentelemetry-extension-trace-propagators")
    implementation("io.quarkiverse.micrometer.registry:quarkus-micrometer-registry-otlp:3.1.2")

    //Security
    implementation ("io.quarkus:quarkus-oidc")
    implementation ("io.quarkus:quarkus-keycloak-admin-client-reactive")

    //Documentation
    implementation("io.quarkus:quarkus-smallrye-openapi")

    //AWS
//    implementation("io.quarkiverse.amazonservices:quarkus-amazon-dynamodb-enhanced:2.5.0")
//    implementation("software.amazon.awssdk:netty-nio-client")


    implementation("io.quarkus:quarkus-hibernate-validator")
    implementation("io.quarkus:quarkus-resteasy-reactive-jackson")
    implementation("io.quarkus:quarkus-resteasy-reactive")
    implementation("io.quarkus:quarkus-config-yaml")
    implementation("io.quarkus:quarkus-smallrye-context-propagation")
    implementation("io.quarkus:quarkus-arc")

    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")

    testImplementation("io.quarkus:quarkus-junit5")
    testImplementation("io.quarkus:quarkus-junit5-mockito:3.3.2")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("io.quarkus:quarkus-jacoco")
}

group 'br.dev.marco'
version '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
    }
}

jacocoTestReport {
    enabled = true
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
